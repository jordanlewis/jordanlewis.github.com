<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jordan Lewis]]></title>
  <link href="http://jordanlewis.org/atom.xml" rel="self"/>
  <link href="http://jordanlewis.org/"/>
  <updated>2012-01-27T23:32:22-05:00</updated>
  <id>http://jordanlewis.org/</id>
  <author>
    <name><![CDATA[Jordan Lewis]]></name>
    <email><![CDATA[jordanthelewis@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Section 2.1]]></title>
    <link href="http://jordanlewis.org/blog/2012/01/27/chapter-1-dot-1/"/>
    <updated>2012-01-27T22:09:00-05:00</updated>
    <id>http://jordanlewis.org/blog/2012/01/27/chapter-1-dot-1</id>
    <content type="html"><![CDATA[<p>This is the inaugural post of the PFDS series.</p>

<p>Section 2.1 discusses the ramifications of implementing lists and stacks in a
functional and immutable manner. Using the operation of <em>list catenation</em>
as a motivator, Okasaki introduces the idea of data sharing. We see that to
catenate two lists, we can share the second list, which doesn&#8217;t get modified,
but must copy all of the nodes in the first list just to modify the last one.</p>

<p>In Scala, the function catenate on the built-in list type looks like the
following:</p>

<div><script src='https://gist.github.com/1692508.js?file='></script>
<noscript><pre><code>def catenate[A](xs: List[A], ys: List[A]) : List[A] = xs match {
  case Nil =&gt; ys
  case x::xs =&gt; x :: (catenate(xs, ys))
 }</code></pre></noscript></div>


<p>Updating a single element of the list is similar. We have to copy all of the
elements in the list up to the element to be updated, and then we can point the
tail of the element we updated to the pre-existing tail of the old element,
thus sharing as much data as possible.</p>

<div><script src='https://gist.github.com/1692539.js?file='></script>
<noscript><pre><code>def update[A](xs: List[A], i: Int, y: A) : List[A] = (xs, i) match {
  case (Nil, _) =&gt; throw new AssertionError(&quot;Invalid subscript&quot;)
  case (x::xs, 0) =&gt; y::xs
  case (x::xs, i) =&gt; x::update(xs, i - 1, y)
}</code></pre></noscript></div>


<h3>Exercise 2.1</h3>

<p>This exercise is straightforward: we must write a function that takes a generic
list and returns a list of all of the suffix lists of the input list,
from longest to shortest. We must show that this function operates in linear
time and linear space with respect to the size of the input list.</p>

<p>Since no elements are being updated, it&#8217;s easy to see that all we have to do is
return a new list whose elements are every cons cell in the input list. This
is O(n) in time, as we are performing one cons operation for each element in the
input list, and O(n) in space, as we&#8217;re saving one cons cell per cons cell in
the input list.</p>

<div><script src='https://gist.github.com/1692330.js?file='></script>
<noscript><pre><code>def suffixes[A](xs: List[A]): List[List[A]] = xs match {
  case Nil =&gt; Nil::Nil
  case x::xs =&gt; (x::xs)::suffixes(xs)</code></pre></noscript></div>


<p>This was a pretty simple section, serving mainly as a refresher course in
functional programming fundamentals.</p>

<p>For this post, I reused Scala&#8217;s built-in List type to implement the exercise
and example functions. I had intended to define my own abstract generic Stack,
and show how it can be implemented with either the build-in List type or a set
of case classes Nil and Cons, like Okasaki does using Standard ML. However, I&#8217;m
still a Scala novice, and I ran into some difficulties with the type system
that go over my head at this point. I plan to revisit this at a later date once
I&#8217;ve learned a little bit more about Scala&#8217;s type system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Purely Functional Data Structures]]></title>
    <link href="http://jordanlewis.org/blog/2012/01/03/notes-on-purely-functional-data-structures/"/>
    <updated>2012-01-03T01:24:00-05:00</updated>
    <id>http://jordanlewis.org/blog/2012/01/03/notes-on-purely-functional-data-structures</id>
    <content type="html"><![CDATA[<p>I heard a lot of good things about Mike Okasaki&#8217;s <a href="http://www.amazon.com/gp/product/0521663504/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=jordanlewisor-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521663504">Purely Functional Data Structures</a><img src="http://www.assoc-amazon.com/e/ir?t=jordanlewisor-20&l=as2&o=1&a=0521663504" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> at UChicago, but didn&#8217;t ever take the time to check it out. Lately I&#8217;ve missed the heady joy of reading and writing code in a strongly typed functional programming language like Standard ML, so when one of my coworkers at Knewton mentioned he was going to read the book I decided to get a copy for myself.</p>

<p>I&#8217;m going to try to read through the whole book and complete as many of the exercises that I can. To help myself keep the commitment, I&#8217;m going to follow in Eli Bendersky&#8217;s footsteps and post reading notes and exercise solutions along the way, as <a href="http://eli.thegreenplace.net/2007/06/19/introducing-the-sicp-reading-notes/">he did for SICP</a>.</p>

<p>The notes will be categorized under <a href="http://jordanlewis.org/blog/categories/pfds/">pfds</a>.</p>

<p>Also, I&#8217;ve recently begun to learn Scala, a strongly typed functional language on the JVM with nice features such as algebraic datatypes in the form of case classes, pattern matching, and lazy values. Given the usefulness of these language amenities for exploration of Okasaki&#8217;s concepts, I&#8217;m going to do the exercises in Scala instead of Standard ML or Haskell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://jordanlewis.org/blog/2012/01/02/hello-world/"/>
    <updated>2012-01-02T01:50:00-05:00</updated>
    <id>http://jordanlewis.org/blog/2012/01/02/hello-world</id>
    <content type="html"><![CDATA[<p>Hi internet! I&#8217;ve gotten with the program and bloggified my website with the help of the pretty rad <a href="http://octopress.org">Octopress</a> framework. Hope you enjoy it.</p>
]]></content>
  </entry>
  
</feed>
